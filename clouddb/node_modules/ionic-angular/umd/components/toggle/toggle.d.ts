import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, Renderer } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Config } from '../../config/config';
import { Form } from '../../util/form';
import { Ion } from '../ion';
import { Item } from '../item/item';
import { Haptic } from '../../util/haptic';
import { UIEventManager } from '../../util/ui-event-manager';
export declare const TOGGLE_VALUE_ACCESSOR: any;
export declare class Toggle extends Ion implements AfterContentInit, ControlValueAccessor, OnDestroy {
    _form: Form;
    _haptic: Haptic;
    _item: Item;
    _checked: boolean;
    _init: boolean;
    _disabled: boolean;
    _labelId: string;
    _activated: boolean;
    _startX: number;
    _msPrv: number;
    _fn: Function;
    _events: UIEventManager;
    id: string;
    color: string;
    mode: string;
    ionChange: EventEmitter<Toggle>;
    constructor(_form: Form, config: Config, elementRef: ElementRef, renderer: Renderer, _haptic: Haptic, _item: Item);
    pointerDown(ev: UIEvent): boolean;
    pointerMove(ev: UIEvent): void;
    pointerUp(ev: UIEvent): void;
    checked: boolean;
    _setChecked(isChecked: boolean): void;
    writeValue(val: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: any): void;
    disabled: boolean;
    onChange(isChecked: boolean): void;
    onTouched(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
}
