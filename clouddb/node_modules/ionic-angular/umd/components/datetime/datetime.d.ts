import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, Renderer } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Config } from '../../config/config';
import { Picker, PickerController } from '../picker/picker';
import { Form } from '../../util/form';
import { Ion } from '../ion';
import { Item } from '../item/item';
import { DateTimeData, LocaleData } from '../../util/datetime-util';
export declare const DATETIME_VALUE_ACCESSOR: any;
export declare class DateTime extends Ion implements AfterContentInit, ControlValueAccessor, OnDestroy {
    private _form;
    private _item;
    private _pickerCtrl;
    _disabled: any;
    _labelId: string;
    _text: string;
    _fn: Function;
    _isOpen: boolean;
    _min: DateTimeData;
    _max: DateTimeData;
    _value: DateTimeData;
    _locale: LocaleData;
    id: string;
    min: string;
    max: string;
    displayFormat: string;
    pickerFormat: string;
    cancelText: string;
    doneText: string;
    yearValues: any;
    monthValues: any;
    dayValues: any;
    hourValues: any;
    minuteValues: any;
    monthNames: any;
    monthShortNames: any;
    dayNames: any;
    dayShortNames: any;
    pickerOptions: any;
    mode: string;
    ionChange: EventEmitter<any>;
    ionCancel: EventEmitter<any>;
    constructor(_form: Form, config: Config, elementRef: ElementRef, renderer: Renderer, _item: Item, _pickerCtrl: PickerController);
    _click(ev: UIEvent): void;
    _keyup(): void;
    open(): void;
    generate(picker: Picker): void;
    validate(picker: Picker): void;
    divyColumns(picker: Picker): void;
    setValue(newData: any): void;
    getValue(): DateTimeData;
    checkHasValue(inputValue: any): void;
    updateText(): void;
    calcMinMax(): void;
    disabled: any;
    writeValue(val: any): void;
    ngAfterContentInit(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: any): void;
    onChange(val: any): void;
    onTouched(): void;
    ngOnDestroy(): void;
}
